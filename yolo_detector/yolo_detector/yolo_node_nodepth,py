# yolo_node.py

import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
import cv2
from ultralytics import YOLO
import time
import os
import traceback  # Moved to top level

class YOLODetectorNode(Node):
    def __init__(self):
        super().__init__('yolo_detector_node')
        self.model = YOLO("yolov8n.pt")
        self.bridge = CvBridge()
        
        from rclpy.qos import QoSProfile, ReliabilityPolicy
        qos_profile = QoSProfile(
            reliability=ReliabilityPolicy.BEST_EFFORT,
            depth=10
        )
        
        self.subscription = self.create_subscription(
            Image,
            '/hawk_0_left_rgb_image',
            self.image_callback,
            qos_profile
        )
        self.get_logger().info("YOLOv8 detector node initialized.")
        self.save_dir = "/home/user/annotated_images"  # Use existing user directory
        os.makedirs(self.save_dir, exist_ok=True)  # Create directory at startup

    def image_callback(self, msg):
        self.get_logger().info("Image received.")

        try:
            frame = self.bridge.imgmsg_to_cv2(msg, desired_encoding='rgb8')
            frame_bgr = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)
            self.get_logger().info(f"Frame shape: {frame_bgr.shape}")

            results = self.model(frame_bgr)
            self.get_logger().info("YOLO inference done.")

            annotated = results.plot()
            
            # Save with timestamped filename
            timestamp = int(time.time() * 1000)
            filename = f"annotated_{timestamp}.png"
            filepath = os.path.join(self.save_dir, filename)
            success = cv2.imwrite(filepath, annotated)
            self.get_logger().info(f"Saved image: {filepath}, Success: {success}")

        except Exception as e:
            self.get_logger().error(f"Error in image_callback: {str(e)}")
            self.get_logger().error(traceback.format_exc())

def main(args=None):
    rclpy.init(args=args)
    node = YOLODetectorNode()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()
        cv2.destroyAllWindows()

if __name__ == '__main__':
    main()

